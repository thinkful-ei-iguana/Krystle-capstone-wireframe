{"ast":null,"code":"import _classCallCheck from \"/Users/krystlenoweski/Krystle-capstone-wireframe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krystlenoweski/Krystle-capstone-wireframe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/krystlenoweski/Krystle-capstone-wireframe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/krystlenoweski/Krystle-capstone-wireframe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krystlenoweski/Krystle-capstone-wireframe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/krystlenoweski/Krystle-capstone-wireframe/src/NotesForm/notesForm.js\";\nimport React from 'react';\nimport config from '../config';\nimport ApiContext from '../ApiContext';\nimport '../NotesForm/notesForm.css';\n\nvar NotesForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NotesForm, _React$Component);\n\n  function NotesForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NotesForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NotesForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      noteName: {\n        value: '',\n        touched: false\n      },\n      noteDescription: {\n        value: '',\n        touched: false\n      },\n      folders: _this.context.folders,\n      selectValue: {\n        value: '',\n        touched: false\n      }\n    };\n\n    _this.setNoteName = function (noteName) {\n      _this.setState({\n        noteName: {\n          value: noteName,\n          touched: true\n        }\n      });\n    };\n\n    _this.setNoteDescription = function (noteDescription) {\n      _this.setState({\n        noteDescription: {\n          value: noteDescription,\n          touched: true\n        }\n      });\n    };\n\n    _this.setSelectedValue = function (selectValue) {\n      _this.setState({\n        selectValue: {\n          value: selectValue,\n          touched: true\n        }\n      });\n    };\n\n    _this.validateNoteName = function () {\n      var noteName = _this.state.noteName.value.trim();\n\n      if (noteName === 0) {\n        return \"Note Name is required\";\n      } else if (noteName.length < 1 || noteName.length > 12) {\n        return 'Note Name must between 1 and 12 characters long';\n      }\n    };\n\n    _this.validateNoteDescription = function () {\n      var noteDescription = _this.state.noteDescription.value.trim();\n\n      if (noteDescription === 0) {\n        return \"Note Description is required\";\n      } else if (noteDescription.length < 6 || noteDescription.length > 72) {\n        return 'Note Description must between 6 and 72 characters long';\n      }\n    };\n\n    _this.validateSelectedValue = function () {\n      var selectValue = _this.state.selectValue.value;\n\n      if (selectValue === \"\") {\n        return \"Folder must be Selected\";\n      }\n    };\n\n    _this.handleNoteSubmit = function () {\n      var noteName = _this.state.noteName.value.trim();\n\n      var noteDescription = _this.state.noteDescription.value;\n      var selectValue = _this.state.selectValue.value; //1, 2\n\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var jsonObj = {\n        name: noteName,\n        content: noteDescription,\n        folderId: selectValue,\n        modified: date\n      };\n      var request = JSON.stringify(jsonObj);\n      fetch(\"\".concat(config.API_ENDPOINT, \"/notes\"), {\n        method: 'POST',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        }),\n        body: request\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(response);\n\n        _this.context.addNote(response);\n      }).catch(function (error) {\n        console.error({\n          error: error\n        });\n      });\n    };\n\n    _this.getFolderOptions = function () {\n      var selectValue = _this.state.selectValue.value; //1, 2\n\n      var folders = _this.context.folders.map(function (folder) {\n        if (folder.id === selectValue) {\n          return React.createElement(\"option\", {\n            key: folder.id,\n            value: folder.id,\n            selected: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, folder.name);\n        } else {\n          return React.createElement(\"option\", {\n            key: folder.id,\n            value: folder.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, folder.name);\n        }\n      });\n\n      return folders;\n    };\n\n    return _this;\n  }\n\n  _createClass(NotesForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var folderOptions = this.getFolderOptions();\n      return React.createElement(\"form\", {\n        className: \"notes-form\",\n        onSubmit: function onSubmit() {\n          return _this2.handleNoteSubmit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Note Name\", this.state.noteName.touched && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.validateNoteName())), React.createElement(\"input\", {\n        id: \"note-name\",\n        type: \"text\",\n        value: this.state.noteName.value,\n        onChange: function onChange(e) {\n          return _this2.setNoteName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"note-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Note Description\", this.state.noteDescription.touched && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, this.validateNoteDescription())), React.createElement(\"input\", {\n        id: \"note-description\",\n        type: \"text\",\n        value: this.state.noteDescription.value,\n        onChange: function onChange(e) {\n          return _this2.setNoteDescription(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"folder-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Choose a Folder\", this.state.selectValue.touched && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.validateSelectedValue())), React.createElement(\"select\", {\n        name: \"folders\",\n        id: \"folder-select\",\n        value: this.state.selectValue.value,\n        onChange: function onChange(e) {\n          return _this2.setSelectedValue(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"-----\"), folderOptions), React.createElement(\"button\", {\n        disabled: this.validateNoteName() || this.validateNoteDescription() || this.validateSelectedValue(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Submit Note\"));\n    }\n  }]);\n\n  return NotesForm;\n}(React.Component);\n\nNotesForm.contextType = ApiContext;\nexport { NotesForm as default };","map":{"version":3,"sources":["/Users/krystlenoweski/Krystle-capstone-wireframe/src/NotesForm/notesForm.js"],"names":["React","config","ApiContext","NotesForm","state","noteName","value","touched","noteDescription","folders","context","selectValue","setNoteName","setState","setNoteDescription","setSelectedValue","validateNoteName","trim","length","validateNoteDescription","validateSelectedValue","handleNoteSubmit","today","Date","date","getFullYear","getMonth","getDate","jsonObj","name","content","folderId","modified","request","JSON","stringify","fetch","API_ENDPOINT","method","headers","Headers","body","then","response","json","console","log","addNote","catch","error","getFolderOptions","map","folder","id","folderOptions","e","target","Component","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport config from '../config'\nimport ApiContext from '../ApiContext'\nimport '../NotesForm/notesForm.css'\n\nexport default class NotesForm extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        noteName: { value: '', touched: false },\n        noteDescription: { value: '', touched: false },\n        folders: this.context.folders,\n        selectValue: { value: '', touched: false }\n    };\n\n    setNoteName = noteName => {\n        this.setState({ noteName: { value: noteName, touched: true } });\n    };\n\n    setNoteDescription = noteDescription => {\n        this.setState({ noteDescription: { value: noteDescription, touched: true } });\n    };\n\n    setSelectedValue = selectValue => {\n        this.setState({ selectValue: { value: selectValue, touched: true } });\n    }\n\n\n    validateNoteName = () => {\n        let noteName = this.state.noteName.value.trim();\n        if (noteName === 0) {\n            return \"Note Name is required\"\n        }\n        else if (noteName.length < 1 || noteName.length > 12) {\n            return 'Note Name must between 1 and 12 characters long'\n        }\n    }\n\n    validateNoteDescription = () => {\n        let noteDescription = this.state.noteDescription.value.trim();\n        if (noteDescription === 0) {\n            return \"Note Description is required\"\n        }\n        else if (noteDescription.length < 6 || noteDescription.length > 72) {\n            return 'Note Description must between 6 and 72 characters long'\n        }\n    }\n\n    validateSelectedValue = () => {\n        let selectValue = this.state.selectValue.value;\n        if(selectValue === \"\"){\n            return \"Folder must be Selected\"\n        }\n    }\n\n    handleNoteSubmit = () => {\n        let noteName = this.state.noteName.value.trim();\n        let noteDescription = this.state.noteDescription.value;\n        let selectValue = this.state.selectValue.value; //1, 2\n\n        var today = new Date();\n        var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n        let jsonObj = {\n            name: noteName,\n            content: noteDescription,\n            folderId: selectValue,\n            modified: date\n        }\n\n        let request = JSON.stringify(jsonObj)\n        fetch(`${config.API_ENDPOINT}/notes`,\n            {\n                method: 'POST',\n                headers: new Headers({\n                    'Content-Type': 'application/json'\n                }),\n                body: request,\n            })\n            .then(function (response) {\n                return response.json();\n            })\n            .then((response) => {\n                console.log(response)\n                this.context.addNote(response)\n            })\n            .catch(error => {\n                console.error({ error })\n            })\n    }\n\n\n    getFolderOptions = () => {\n        let selectValue = this.state.selectValue.value; //1, 2\n        const folders = this.context.folders.map(function (folder) {\n            if (folder.id === selectValue) {\n                return (\n                    <option key={folder.id} value={folder.id} selected>{folder.name}</option>\n                )\n            } else {\n                return (\n                    <option key={folder.id} value={folder.id}>{folder.name}</option>\n                )\n            }\n        })\n        return folders;\n    }\n\n\n\n    render() {\n        const folderOptions = this.getFolderOptions();\n        return (\n            <form className=\"notes-form\" onSubmit={() => this.handleNoteSubmit()}>\n                <label htmlFor=\"note-name\">Note Name\n                {this.state.noteName.touched &&\n                        <p className=\"error\">{this.validateNoteName()}</p>}\n                </label>\n                <input id=\"note-name\" type=\"text\" value={this.state.noteName.value}\n                    onChange={e => this.setNoteName(e.target.value)} />\n\n                <label htmlFor=\"note-description\">Note Description\n                {this.state.noteDescription.touched &&\n                        <p className=\"error\">{this.validateNoteDescription()}</p>}\n                </label>\n                <input id=\"note-description\" type=\"text\" value={this.state.noteDescription.value}\n                    onChange={e => this.setNoteDescription(e.target.value)} />\n                    <label htmlFor=\"folder-select\">Choose a Folder\n                {this.state.selectValue.touched &&\n                        <p className=\"error\">{this.validateSelectedValue()}</p>}\n                </label>\n                <select name=\"folders\" id=\"folder-select\" value={this.state.selectValue.value}\n                    onChange={e => this.setSelectedValue(e.target.value)}\n                >\n                    <option value=\"\">-----</option>\n                    {folderOptions}\n                </select>\n                <button disabled={\n                    this.validateNoteName() ||\n                    this.validateNoteDescription() ||\n                    this.validateSelectedValue()\n                }>Submit Note</button>\n            </form>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}